/**
 * @file
 * @brief This file implements various utility functions that are
 * can be used by the storage server and client library.
 */

#define _XOPEN_SOURCE

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <unistd.h>
#include "utils.h"

int sendall(const int sock, const char *buf, const size_t len)
{
    size_t tosend = len;
    while (tosend > 0) {
        ssize_t bytes = send(sock, buf, tosend, 0);
        if (bytes <= 0)
            break; // send() was not successful, so stop.
        tosend -= (size_t) bytes;
        buf += bytes;
    };

    return tosend == 0 ? 0 : -1;
}

/**
 * In order to avoid reading more than a line from the stream,
 * this function only reads one byte at a time.  This is very
 * inefficient, and you are free to optimize it or implement your
 * own function.
 */
int recvline(const int sock, char *buf, const size_t buflen)
{
    int status = 0; // Return status.
    size_t bufleft = buflen;

    while (bufleft > 1) {
        // Read one byte from scoket.
        ssize_t bytes = recv(sock, buf, 1, 0);
        if (bytes <= 0) {
            // recv() was not successful, so stop.
            status = -1;
            break;
        } else if (*buf == '\n') {
            // Found end of line, so stop.
            *buf = 0; // Replace end of line with a null terminator.
            status = 0;
            break;
        } else {
            // Keep going.
            bufleft -= 1;
            buf += 1;
        }
    }
    *buf = 0; // add null terminator in case it's not already there.

    return status;
}

/**
 * @brief Split a string and return one of the split strings.
 *
 * @param str string to be split
 * @param to_return place to return the specified paramter in str
 * @param param_num which index of the split str to return
 * @param delims string of all characters used to deliminate string
 * @return no return value
 */
void get_string(char str[MAX_VALUE_LEN], char to_return[MAX_VALUE_LEN], int param_num, char *delims)
{
    int i = 0;
    char *pch;
    pch = strtok (str, delims);

    while (pch != NULL)
    {
        if (param_num - i > 0)
        {
            pch = strtok (NULL, delims);
            i++;
        }
        else
        {
            break;
        }
    }
    if (pch == NULL)
    {
        // param doesn't exist, something messed up
        // don't need to catch it here, should be done in parsing
        // of command in client.c or storage.c
    }
    else
    {
        strcpy(to_return, pch);
    }
}

/**
 * @brief Parse and process a line in the config file.
 */
int process_config_line(char *line, struct config_params *params)
{
    // Ignore comments.
    if (line[0] == CONFIG_COMMENT_CHAR)
        return 0;

    // Extract config parameter name and value.
    char name[MAX_CONFIG_LINE_LEN];
    char value[MAX_CONFIG_LINE_LEN];
    char temp[300];

    char * pch;
    char col1[10][100];
    char col[10][MAX_COLNAME_LEN];
    char type[10][15];

    int items = sscanf(line, "%s %s\n", name, value);
    if (items != 2) {
     if(items==-1) {
      //ignore empty line
      return 0;
     }
     else {
    	 return -1;
     }
    }

    int x=0;
    int countcomma=0;
    while(line[x]!='\0'){
     if(line[x]==',')
      countcomma=countcomma+1;
      x=x+1;
    }



      x=2;
      while(x<12){
       strcpy(temp,line);
       get_string(temp,col1[x-2],x," ,");
       if(strcmp(col1[x-2], col1[x-3]) == 0){
    	   break;
       }
       if(!(strstr(col1[x-2],":"))){
         break;
       }
       x=x+1;
      }
      x=x-2;

    // Process this line.
    if (strcmp(name, "server_host") == 0) {
        strncpy(params->server_host, value, sizeof params->server_host);
    } else if (strcmp(name, "server_port") == 0) {
        params->server_port = atoi(value);
    } else if (strcmp(name, "username") == 0) {
        strncpy(params->username, value, sizeof params->username);
    } else if (strcmp(name, "password") == 0) {
        strncpy(params->password, value, sizeof params->password);
    }// else if (strcmp(name, "data_directory") == 0) {
    //	strncpy(params->data_directory, value, sizeof params->data_directory);
    //}
    //Added new table here
    else if (strcmp(name, "table") == 0) {
        int tablecount1=params->tablecount;
        if(tablecount1==101){

        	return -1;
        }
        strncpy(params->mytables[tablecount1-1], value, sizeof params->mytables[tablecount1-1]);

        if(x>0){

        int count=x;
        if((countcomma+1)!=count){
        	return -1;
        }

        x=0;
        int m=0;
        while(x<count) {
            pch = strtok (col1[x],":");
            sscanf(pch, "%s\n", col[x]);

            while(pch[m]!='\0'){
            	m=m+1;
            	if(m==20){
            		return -1;
            	}
            }
            pch = strtok (NULL, ":");
            sscanf(pch, "%s\n", type[x]);
            x=x+1;
        }

        x=0;
        int y=0;
        while(x<count) {
            y=0;
            while(col[x][y]!=NULL) {
                if(!((col[x][y]>='a')&&(col[x][y]<='z'))) {
                    if(!((col[x][y]>='0')&&(col[x][y]<='9'))) {
                        if(!((col[x][y]>='A')&&(col[x][y]<='Z'))) {
                            return -1;
                        }
                    }
                }
                y=y+1;
            }
            x=x+1;
        }


        x=0;
        while(x<count) {
            if (strcmp(type[x], "int") != 0) {
                if(strcmp(type[x], "char") == 0) {
                	return -1;
                }
                char temp[15];
                strcpy(temp, type[x]);
                pch = strtok (temp,"[");
                //printf("CHP IS %s",pch);
                if(strcmp(pch, "char") != 0) {
                    return -1;
                }
                pch = strtok (NULL,"]");
                int t=0;
                int integer=atoi(pch);
              if((integer<0)||(integer>40)){
                	return -1;
                }
                while(pch[t]!=NULL) {
                    if(!((pch[t]>='0')&&(pch[t]<='9'))) {
                        return -1;
                    }
                    t=t+1;
                }
            }
            x=x+1;
        }

        params->numcolumnspertable[tablecount1-1]=count;

        x=0;
        while(x<count) {

            strncpy(params->mycolumns[tablecount1-1][x], col[x], sizeof params->mycolumns[tablecount1-1][x]);
            strncpy(params->column_types[tablecount1-1][x], type[x], sizeof params->column_types[tablecount1-1][x]);
            x=x+1;

        }
    }
   }
    else {
        return -1;
    }

    return 0;
}


int read_config(const char *config_file, struct config_params *params)
{
    int error_occurred = 0;
    //Newly added below
    int server_hostcount=0;
    int server_portcount=0;
    int usernamecount=0;
    int passwordcount=0;
    int tablecount=0;


    // Open file for reading.
    FILE *file = fopen(config_file, "r");
    if (file == NULL)
        error_occurred = 1;

    // Process the config file.
    while (!error_occurred && !feof(file)) {
        // Read a line from the file.
        char line[MAX_CONFIG_LINE_LEN];
        char *l = fgets(line, sizeof line, file);

        // Process the line.
        if (l == line) {

            char name1[MAX_CONFIG_LINE_LEN];
            char value[MAX_TABLE_LEN];

            //Clearing string here, otherwise causes awful problems
            strcpy(name1, "");

            sscanf(line, "%s %s\n", name1,value);
            if (strcmp(name1, "server_host") == 0) {
                server_hostcount=server_hostcount+1;
                if(server_hostcount>1)
                    error_occurred=1;
            } else if (strcmp(name1, "server_port") == 0) {
                server_portcount=server_portcount+1;
                if(server_portcount>1)
                    error_occurred=1;
            } else if (strcmp(name1, "username") == 0) {
                usernamecount=usernamecount+1;
                if(usernamecount>1)
                    error_occurred=1;
            } else if (strcmp(name1, "password") == 0) {
                passwordcount=passwordcount+1;
                if(passwordcount>1)
                    error_occurred=1;
            }
            else if (strcmp(name1, "table") == 0) {
                int d;
                for(d=0; d<tablecount; d++) {
                    if(strcmp(params->mytables[d], value) == 0) {
                        error_occurred=1;
                    }
                }
                tablecount=tablecount+1;
                (params->tablecount)=tablecount;
            }

            int errorcheck=process_config_line(line, params);
            if(errorcheck==-1){
                error_occurred = 1;
            }
        }
        else if (!feof(file)) {
            error_occurred = 1;
        }
    }

    //If any of them is missing, give error
    if(!(server_hostcount&&server_portcount&&usernamecount&&passwordcount&&tablecount)) {
    	error_occurred = 1;
    }
    /*
    //PRINTING VALUES HERE
    printf("server_host is %s\n", params->server_host);
    printf("server_port is %d\n", params->server_port);
    printf("username is %s\n", params->username);
    printf("password is %s\n", params->password);

    printf("mytables are %s, %s, %s, %s\n", params->mytables[0],params->mytables[1],params->mytables[2],params->mytables[3]);
    printf("mycolumns1 is %s, %s, %s\n", params->mycolumns[0][0],params->mycolumns[0][1],params->mycolumns[0][2]);
    printf("mycolumns2 is %s, %s, %s\n", params->mycolumns[1][0],params->mycolumns[1][1],params->mycolumns[1][2]);
    printf("mycolumns3 is %s, %s, %s\n", params->mycolumns[2][0],params->mycolumns[2][1],params->mycolumns[2][2]);
    printf("mycolumns4 is %s, %s, %s\n", params->mycolumns[3][0],params->mycolumns[3][1],params->mycolumns[3][2]);
    printf("tablecount is %d\n", params->tablecount);
    printf("numcolumnspertable are %d, %d, %d, %d\n", params->numcolumnspertable[0],params->numcolumnspertable[1],params->numcolumnspertable[2],params->numcolumnspertable[3]);

    printf("column_types1 is %s, %s, %s\n", params->column_types[0][0],params->column_types[0][1],params->column_types[0][2]);
    printf("column_types2 is %s, %s, %s\n", params->column_types[1][0],params->column_types[1][1],params->column_types[1][2]);
    printf("column_types3 is %s, %s, %s\n", params->column_types[2][0],params->column_types[2][1],params->column_types[2][2]);
    printf("column_types4 is %s, %s, %s\n", params->column_types[3][0],params->column_types[3][1],params->column_types[3][2]);

*/

    return error_occurred ? -1 : 0;
}

void logger(FILE *file, char *message, int loggingConstant)
{
    if (loggingConstant==2) {
        fprintf(file,"%s",message);
        fflush(file);
    }
    else if (loggingConstant==1) {
        printf("%s\n",message);
    }
    else if (loggingConstant==0) {
        // Disabled
    }
    else {
        // Nothing
    }

    return;

}

char *generate_encrypted_password(const char *passwd, const char *salt)
{
    if(salt != NULL)
        return crypt(passwd, salt);
    else
        return crypt(passwd, DEFAULT_CRYPT_SALT);
}

