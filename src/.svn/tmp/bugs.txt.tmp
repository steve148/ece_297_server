/* BUGS.TXT FILE */

FORMAT:

USER
DATE
DESCRIPTION (WHICH FILE, EXPECTED VS ACTUAL OUTPUT, CODE SNIPPET)

*******************


1.

USER: Maxim Antipin
DATE: March 10, 2014
DESCRIPTION: Bug found in "server.c" file, related to on-disk storage. Issuing a set command would result in all entries in the table file being replaced with the new entry and it's values.
The bug was found on this line:

fprintf(fileWriteData,"%s:%s;\n",key_to_set,value_to_set);

This line is executed if the key in the table storage file does not match the key in the set command. This line should reprint a line read from the old file, but instead is printing the new
key and value. Replacing this line with:

fprintf(fileWriteData,"%s\n".bulkLoadLine1);

fixed the problem. bulkLoadLine1 is a string that was read from the old file.

/*** END OF BUG ***/


2.

USER: Lennox Stevenson
DATE: March 15, 2014
DESCRIPTION: Bug occured when running the executable `./server default.conf`, saying a seg fault occured in the file.

Using valgrind to get the seg fault error code, it came up with error code 11. Looking up the error code, it meant that too much memory was used in the program and it was overflowing the stack.

To fix the problem, the data structure tables was made static as follows, allowing our server to run properly.

static char tables [MAX_TABLES][MAX_COLUMNS_PER_TABLE][MAX_RECORDS_PER_TABLE][MAX_STRTYPE_SIZE];

Although static can cause side effects if used unproperly, few sections of the code have any effect on the table, and those that do were made sure to be safe. 

/*** END OF BUG ***/


3.

USER: Lennox Stevenson
DATE: March 15, 2014
DESCRIPTION: Bug occurred when testing out a set with invalid parameters. storage_set() passed despite erroneous input.

<<<<<<< .mine
Using printf statements throughout the set function branch, it was found that server side it did send an error message to client, but client didn't check for ERR_INVALID_PARAM. Added the lines below to storage.c to solve the problem:

char *if_invalidparam = strstr(buf,"ERR_INVALID_PARAM");
.
.
.
else if (if_invalidparam) {
	errno = ERR_INVALID_PARAM;
   	return -1;
}

/*** END OF BUG ***/
=======
/*** END OF BUG ***/


FOR LENNOX:
I used SET for students 65 47 => successful
and i used GET for students 65, i got a reply of "47 47"

I used SET for cars, "bmw", 35, i got an error code 2, and a segmentation fault from the server
(note bmw is a char value)>>>>>>> .r77
