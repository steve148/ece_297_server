/**
 * @file
 * @brief This file contains the implementation of the storage server
 * interface as specified in storage.h.
 */
#include <errno.h>
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include "storage.h"
#include "utils.h"

FILE *fclientOut;


/**
 * @brief This is just a minimal stub implementation.  You should modify it 
 * according to your design.
 */
void* storage_connect(const char *hostname, const int port)
{

	if(hostname==NULL)
		errno=ERR_INVALID_PARAM;

	// Create a socket.
	int sock = socket(PF_INET, SOCK_STREAM, 0);
	if (sock < 0){
		errno=ERR_UNKNOWN;
		return NULL;
	}

	// Get info about the server.
	struct addrinfo serveraddr, *res;
	memset(&serveraddr, 0, sizeof serveraddr); // Memory management, useful to log this event as it can potentially crash
	// the system or cause problems in the future

	char log_message[100];
	sprintf(log_message,"Connect: memset complete\n"); // Specifies it is the storage_connect function
	logger(fclientOut,log_message,LOGGING_CLIENT);

	serveraddr.ai_family = AF_UNSPEC;
	serveraddr.ai_socktype = SOCK_STREAM;
	char portstr[MAX_PORT_LEN];
	snprintf(portstr, sizeof portstr, "%d", port);
	int status = getaddrinfo(hostname, portstr, &serveraddr, &res);

	if (status != 0){
		errno=ERR_UNKNOWN;
		return NULL;
	}

	// Connect to the server.
	status = connect(sock, res->ai_addr, res->ai_addrlen);
	if (status != 0){
		errno=ERR_CONNECTION_FAIL;
		return NULL;
	}

	return (void*) sock;
}


/**
 * @brief This is just a minimal stub implementation.  You should modify it 
 * according to your design.
 */
int storage_auth(const char *username, const char *passwd, void *conn)
{

	if((username==NULL)||(passwd==NULL)||(conn == NULL)){
		    errno=ERR_INVALID_PARAM;
		    return -1;
	}
	// Connection is really just a socket file descriptor.
	int sock = (int)conn;

	// Send some data.
	char buf[MAX_CMD_LEN];
	memset(buf, 0, sizeof buf); // Memory management, useful to log this event as it can potentially crash
	// the system or cause problems in the future

	char log_message[100];	
	sprintf(log_message,"Authorizing: memset complete\n"); // Specifies it is the storage_auth function
	logger(fclientOut,log_message,LOGGING_CLIENT);

	char *encrypted_passwd = generate_encrypted_password(passwd, NULL);
	snprintf(buf, sizeof buf, "AUTH %s %s\n", username, encrypted_passwd);
	if (sendall(sock, buf, strlen(buf)) == 0 && recvline(sock, buf, sizeof buf) == 0) {
	  char *if_auth = strstr(buf,"SUCCESS");
	  if(if_auth){
		return 0;
	  }
	  else{
		errno=ERR_AUTHENTICATION_FAILED;
		return -1;
	  }
	}
	errno=ERR_CONNECTION_FAIL;
	return -1;
}

/**
 * @brief This is just a minimal stub implementation.  You should modify it 
 * according to your design.
 */
int storage_get(const char *table, const char *key, struct storage_record *record, void *conn)
{
	if((table==NULL)||(key==NULL)||(conn == NULL)){
	  errno=ERR_INVALID_PARAM;
	  return -1;
	}

	// Connection is really just a socket file descriptor.
	int sock = (int)conn;

	// Send some data.
	char buf[MAX_CMD_LEN];
	memset(buf, 0, sizeof buf); // Memory management, useful to log this event as it can potentially crash
	// the system or cause problems in the future

	char log_message[100];	
	sprintf(log_message,"GET: memset complete\n"); // Specifies it is the storage_get function
	logger(fclientOut,log_message,LOGGING_CLIENT);

	snprintf(buf, sizeof buf, "GET %s %s\n", table, key);
	if (sendall(sock, buf, strlen(buf)) == 0 && recvline(sock, buf, sizeof buf) == 0) {
	  char *if_getfail1 = strstr(buf,"ERR_KEY_NOT_FOUND");
	  char *if_getfail2 = strstr(buf,"ERR_TABLE_NOT_FOUND");
	  char *if_authfail = strstr(buf,"ERR_NOT_AUTHENTICATED");

	  if(if_getfail1){
		errno=ERR_KEY_NOT_FOUND;
		return -1;
	  }
	  else if(if_authfail){
		errno=ERR_NOT_AUTHENTICATED;
		return -1;
	  }
	  else if(if_getfail2){
	  	errno=ERR_TABLE_NOT_FOUND;
	  	return -1;
	  }
	  else{
		 strncpy(record->value, buf, sizeof record->value);
		 return 0;
	  }
	}
	errno=ERR_CONNECTION_FAIL;
	return -1;
}


/**
 * @brief This is just a minimal stub implementation.  You should modify it 
 * according to your design.
 */
int storage_set(const char *table, const char *key, struct storage_record *record, void *conn)
{
	if((table==NULL)||(key==NULL)||(conn == NULL)){
		  errno=ERR_INVALID_PARAM;
		  return -1;
	}

	// Connection is really just a socket file descriptor.
	int sock = (int)conn;

	// Send some data.
	char buf[MAX_CMD_LEN];
	memset(buf, 0, sizeof buf); // Memory management, useful to log this event as it can potentially crash
	// the system or cause problems in the future

	char log_message[100];	
	sprintf(log_message,"SET: memset complete\n"); // Specifies it is the storage_set function
	logger(fclientOut,log_message,LOGGING_CLIENT);
	
	char *if_NULLvalue = strstr(record->value,"NULL");


	if((record->value==NULL)||(if_NULLvalue)){
	 snprintf(buf, sizeof buf, "DELETE %s %s %s\n", table, key, record->value);
	 if (sendall(sock, buf, strlen(buf)) == 0 && recvline(sock, buf, sizeof buf) == 0) {
	   char *if_setfail = strstr(buf,"ERR_TABLE_NOT_FOUND");
	   char *if_authfail = strstr(buf,"ERR_NOT_AUTHENTICATED");
	   if(if_setfail){
		 errno=ERR_TABLE_NOT_FOUND;
		 return -1;
	   }
	   else if(if_authfail){
	   	 errno=ERR_NOT_AUTHENTICATED;
	   	 return -1;
	   }
	   else
		 return 0;
	 }
	}

	else {
	snprintf(buf, sizeof buf, "SET %s %s %s\n", table, key, record->value);
	if (sendall(sock, buf, strlen(buf)) == 0 && recvline(sock, buf, sizeof buf) == 0) {
	 char *if_setfail = strstr(buf,"ERR_TABLE_NOT_FOUND");
	 char *if_authfail = strstr(buf,"ERR_NOT_AUTHENTICATED");

	 if(if_setfail){
	  errno=ERR_TABLE_NOT_FOUND;
	  return -1;
	}
	 else if(if_authfail){
	  errno=ERR_NOT_AUTHENTICATED;
	  return -1;
	}
	 else
	  return 0;
	}
   }
	errno=ERR_CONNECTION_FAIL;
	return -1;
}


/**
 * @brief This is just a minimal stub implementation.  You should modify it 
 * according to your design.
 */
int storage_disconnect(void *conn)
{
	if (conn == NULL) {
		errno=ERR_INVALID_PARAM;
		return -1;
	}
	// Cleanup
	int sock = (int)conn;

	close(sock);

	return 0;
}

