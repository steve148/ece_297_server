#include <errno.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <stdlib.h>
#include "storage.h"
#include "utils.h"
#include <time.h>

FILE *fclientOut;
FILE *fbulkLoad;
FILE *metricsfile;

#define MAX_METRICS 1000

// 676 Keys in Array

void getString (char **stringS)
{

    // Clear input stream
    fflush(stdin);

    char c;
    int stringLen = 1;
    int charCount = 0;

    if (*stringS)
    {
        free(*stringS);
    }

    // Allocate memory for one character and a NULL terminator
    (*stringS) = (char *)malloc( (stringLen + 1));

    // Skip all newlines
    do
    {
        c = getc(stdin);
    }
    while (c == '\n');

    do
    {
        // If more space is needed in string, reallocate it
        if (charCount >= stringLen)
        {
            stringLen = stringLen * 2;
            (*stringS) = realloc((*stringS), (stringLen + 1));
        }
        // Add to string
        (*stringS)[charCount] = c;
        charCount++;
        c = getc(stdin);
    }
    while (c != '\n');

    (*stringS)[charCount] = '\0';

}

// Checks if the string has characters other than integers
bool intCheck (char *stringS)
{

    int i = 0;
    int temp;

    do
    {
        temp = stringS[i] - 48;
        if (temp > 9 || temp < 0)
            return false;
        i++;
    }
    while (stringS[i] != '\0');

    return true;

}

int main(int argc, char *argv[])
{
    
    int g = 0;
    int commandValue;
    int portNumber;
    int globalcount2 = 0;

    float globalcountM = 0;
    float globaltimeM = 0;

    bool exitClient = false;

    char *commandKey = NULL;
    char *hostnameString = NULL;
    char *portString = NULL;
    char *usernameString = NULL;
    char *passwordString = NULL;
    char *tableGetString = NULL;
    char *keyGetString = NULL;
    char *tableSetString = NULL;
    char *keySetString = NULL;
    char *recordSetString = NULL;
    char *confirmString = NULL;
    char *predicatesGetString = NULL;
    char *matchingNum = NULL;
    char *maxKeysString = NULL;
    char **keyArrayPointer = NULL;
    char *randomSeed = NULL;
            char *test_keys[MAX_RECORDS_PER_TABLE];
    char *escapeSeq = "!";

    char *predicatearray[15];

    char *metrickeys[MAX_RECORDS_PER_TABLE];
    for (g = 0; g < MAX_RECORDS_PER_TABLE; g++)
    {
    	metrickeys[g] = (char *)malloc(MAX_KEY_LEN);
        strncpy(metrickeys[g], "", sizeof(metrickeys[g]));
    }

    for (g = 0; g < 10; g++)
    {
    	predicatearray[g] = (char *)malloc(400);
        strncpy(predicatearray[g], "", sizeof(predicatearray[g]));
    }

    char **keyArrayPointer2 = metrickeys;
    char **keypredicatepoint = predicatearray;
	
    strcpy(predicatearray[0],"Population > 10000");
    strcpy(predicatearray[1], "Rank < 200");
    strcpy(predicatearray[2], "Change < 0");
    strcpy(predicatearray[3], "Province = Ont");
    strcpy(predicatearray[4], "Rank < 100, Population > 5");
    strcpy(predicatearray[5], "Population < 500, Rank < 5");
    strcpy(predicatearray[6], "Population>10");
    strcpy(predicatearray[7], "Province=Ont,Population>10000");
    strcpy(predicatearray[8], "Change=0");
    strcpy(predicatearray[9], "Population=8,Change=-2");

    int totalKeys = 0;
    int randomSeedint = 0;
	
    struct timeval beforeTime,afterTime;

    char *bulkLoadLine1;
    char *bulkLoadLine2;
    char *bulkLoadLine3;
    char *bulkLoadTemp;

    (bulkLoadLine1) = (char *)malloc( (100 + 1));
    (bulkLoadLine2) = (char *)malloc( (100 + 1));
    (bulkLoadLine3) = (char *)malloc( (100 + 1));
    (bulkLoadTemp) = (char *)malloc( (100 + 1));
    size_t lengthBulkString;

    void *conn = NULL;

    bool stopLoad;
    bool firstPass;
    time_t rawtime;
    struct tm *timeinfo;
    char timeStamp [50];

    fbulkLoad = fopen ("bulkload.txt", "rt");
	metricsfile = fopen ("metrics.txt", "w+");
	
    time (&rawtime);
    timeinfo = localtime (&rawtime);

    strftime (timeStamp, 50, "Client-%F-%H-%M-%S.log", timeinfo);

    if (LOGGING_CLIENT == 2)
    {
        fclientOut = fopen (timeStamp, "w+");
    }
    do
    {
        fflush(stdin);

        // Show Menu
        printf("> Menu: (Escape Sequence is '%s') \n", escapeSeq);
        printf("> --------------------- \n");
        printf("> 1) Connect \n");
        printf("> 2) Authenticate \n");
        printf("> 3) Get \n");
        printf("> 4) Set \n");
        printf("> 5) Disconnect \n");
        printf("> 6) Exit \n");
        printf("> 7) Bulk Load \n");
        printf("> 8) Query \n");
        printf("> 9) Metrics \n");
        printf("> 10) Transaction \n");

        printf("> --------------------- \n");

        // Command Input
        printf("> Enter command key: ");
        getString(&commandKey);

        commandValue = atoi(commandKey);

        switch (commandValue)
        {

        case 1: // Connect

            printf("> \n");
            printf("> Connect Selected \n");
            printf("> \n");

            printf("> Input the hostname: ");
            getString(&hostnameString);

            if ((*hostnameString) == (*escapeSeq))
            {
                printf(">\n> Escape Sequence Detected - Aborting Command \n>\n");
                break;
            }

            printf("> Input the port: ");
            getString(&portString);

            if ((*portString) == (*escapeSeq))
            {
                printf(">\n> Escape Sequence Detected - Aborting Command \n>\n");
                break;
            }

            while (!intCheck(portString))
            {
                printf("> Port is not a proper number, please reenter port: ");
                getString(&portString);
                errno = ERR_INVALID_PARAM;
                if ((*portString) == (*escapeSeq))
                {
                    printf(">\n> Escape Sequence Detected - Aborting Command \n>\n");
                    break;
                }
            }

            portNumber = atoi(portString); // Converts the string to an integer for proper function argument

            printf("> \n");

            conn = storage_connect(hostnameString, portNumber);

            if (!conn)
            {
                errno = ERR_CONNECTION_FAIL;
                printf("Cannot connect to server @ %s:%d. Error code: %d.\n",
                       hostnameString, portNumber, errno);
                if (LOGGING_CLIENT == 2)
                    fclose(fclientOut);
                return -1;
            }
            printf("storage_connect: successful.\n");
            printf("> \n");

            break;
        case 2: // Authenticate

            if (!conn)
            {
                errno = ERR_CONNECTION_FAIL;
                printf("Cannot connect to server @ %s:%d. Error code: %d.\n",
                       hostnameString, portNumber, errno);
                if (LOGGING_CLIENT == 2)
                    fclose(fclientOut);
                return -1;
            }

            printf("> \n");
            printf("> Authenticate Selected \n");
            printf("> \n");

            printf("> Input the username: ");
            getString(&usernameString);

            if ((*usernameString) == (*escapeSeq))
            {
                printf(">\n> Escape Sequence Detected - Aborting Command \n>\n");
                break;
            }

            printf("> Input the password: ");
            getString(&passwordString);

            if ((*passwordString) == (*escapeSeq))
            {
                printf(">\n> Escape Sequence Detected - Aborting Command \n>\n");
                break;
            }

            int status = storage_auth(usernameString, passwordString, conn);

            if (status != 0)
            {
                errno = ERR_AUTHENTICATION_FAILED;
                printf("storage_auth failed with username '%s' and password '%s'. " \
                       "Error code: %d.\n", usernameString, passwordString, errno);
                storage_disconnect(conn);
                if (LOGGING_CLIENT == 2)
                    fclose(fclientOut);
                return status;
            }
            printf("storage_auth: successful.\n");

            printf("> \n");
            break;

        case 4: // Set

            if (!conn)
            {
                errno = ERR_CONNECTION_FAIL;
                printf("Cannot connect to server @ %s:%d. Error code: %d.\n",
                       hostnameString, portNumber, errno);
                if (LOGGING_CLIENT == 2)
                    fclose(fclientOut);
                return -1;
            }


            printf("> \n");
            printf("> Set Selected \n");
            printf("> \n");

            printf("> Input the table: ");
            getString(&tableSetString);

            if ((*tableSetString) == (*escapeSeq))
            {
                printf(">\n> Escape Sequence Detected - Aborting Command \n>\n");
                break;
            }

            printf("> Input the key: ");
            getString(&keySetString);

            if ((*keySetString) == (*escapeSeq))
            {
                printf(">\n> Escape Sequence Detected - Aborting Command \n>\n");
                break;
            }

            printf("> Input the record: ");
            getString(&recordSetString);

            if ((*recordSetString) == (*escapeSeq))
            {
                printf(">\n> Escape Sequence Detected - Aborting Command \n>\n");
                break;
            }

            struct storage_record r;
            strncpy(r.value, recordSetString, sizeof r.value);
            r.metadata[0]=0;
            status = storage_set(tableSetString, keySetString, &r, conn);
            if (status != 0)
            {
                printf("storage_set failed. Error code: %d.\n", errno);
                storage_disconnect(conn);
                if (LOGGING_CLIENT == 2)
                    fclose(fclientOut);
                return status;
            }
            printf("storage_set: successful.\n");

            printf("> \n");
            break;

        case 3: // Get


            if (!conn)
            {
                errno = ERR_CONNECTION_FAIL;
                printf("Cannot connect to server @ %s:%d. Error code: %d.\n",
                       hostnameString, portNumber, errno);
                if (LOGGING_CLIENT == 2)
                    fclose(fclientOut);
                return -1;
            }


            printf("> \n");
            printf("> Get Selected \n");
            printf("> \n");

            printf("> Input the table: ");
            getString(&tableGetString);

            if ((*tableGetString) == (*escapeSeq))
            {
                printf(">\n> Escape Sequence Detected - Aborting Command \n>\n");
                break;
            }

            printf("> Input the key: ");
            getString(&keyGetString);

            if ((*keyGetString) == (*escapeSeq))
            {
                printf(">\n> Escape Sequence Detected - Aborting Command \n>\n");
                break;
            }

            status = storage_get(tableGetString, keyGetString, &r, conn);
            if (status != 0)
            {
                printf("storage_get failed. Error code: %d.\n", errno);
                storage_disconnect(conn);
                if (LOGGING_CLIENT == 2)
                    fclose(fclientOut);
                return status;
            }
            printf("storage_get: the value returned for key '%s' is '%s'.\n", keyGetString, r.value);

            printf("> \n");
            break;

        case 5: // Disconnect
			    fflush(metricsfile);
            if (!conn)
            {
                errno = ERR_CONNECTION_FAIL;
                printf("Cannot connect to server @ %s:%d. Error code: %d.\n",
                       hostnameString, portNumber, errno);
                if (LOGGING_CLIENT == 2)
                    fclose(fclientOut);
                return -1;
            }


            printf("> \n");
            printf("> Disconnect Selected \n");
            printf("> \n");

            printf("> To confirm input any integer (to cancel input escape sequence): ");
            getString(&confirmString);

            if ((*confirmString) == (*escapeSeq))
            {
                printf(">\n> Escape Sequence Detected - Aborting Command \n>\n");
                break;
            }

            status = storage_disconnect(conn);
            if (status != 0)
            {
                printf("storage_disconnect failed. Error code: %d.\n", errno);
                if (LOGGING_CLIENT == 2)
                    fclose(fclientOut);
                return status;
            }

            printf("> \n");
            break;
        case 6: // Exit

            printf("> \n");
            printf("> Exit Selected \n");
            printf("> \n");

            printf("> To confirm input any integer (to cancel input escape sequence): ");
            getString(&confirmString);

            if ((*confirmString) == (*escapeSeq))
            {
                printf(">\n> Escape Sequence Detected - Aborting Command \n>\n");
                break;
            }

            exitClient = true;
            break;


        case 7: // Bulk Load

            firstPass = true;
            stopLoad = false;

            printf("> \n");
            printf("> Bulk Load Selected \n");
            printf("> \n");

            printf("> To confirm input any integer (to cancel input escape sequence): ");
            getString(&confirmString);

            if ((*confirmString) == (*escapeSeq))
            {
                printf(">\n> Escape Sequence Detected - Aborting Command \n>\n");
                break;
            }

            do
            {

                if (!conn)
                {
                    errno = ERR_CONNECTION_FAIL;
                    printf("Cannot connect to server @ %s:%d. Error code: %d.\n",
                           hostnameString, portNumber, errno);
                    if (LOGGING_CLIENT == 2)
                        fclose(fclientOut);
                    return -1;
                }

                strcpy (bulkLoadTemp, bulkLoadLine2);

                fgets(bulkLoadLine1, 100, fbulkLoad);
                fgets(bulkLoadLine2, 100, fbulkLoad);
                fgets(bulkLoadLine3, 100, fbulkLoad);

                lengthBulkString = strlen(bulkLoadLine1) - 1;
                if (bulkLoadLine1[lengthBulkString] == '\n')
                    bulkLoadLine1[lengthBulkString] = NULL;
                lengthBulkString = strlen(bulkLoadLine2) - 1;
                if (bulkLoadLine2[lengthBulkString] == '\n')
                    bulkLoadLine2[lengthBulkString] = NULL;
                lengthBulkString = strlen(bulkLoadLine3) - 1;
                if (bulkLoadLine3[lengthBulkString] == '\n')
                    bulkLoadLine3[lengthBulkString] = NULL;

                if ( (firstPass == false) && (strcmp(bulkLoadTemp, bulkLoadLine2) == 0) )
                    stopLoad = true;

                if (firstPass == true)
                    firstPass = false;

                if (stopLoad == false)
                {
                    struct storage_record r;
                    strncpy(r.value, bulkLoadLine3, sizeof r.value);
                    status = storage_set(bulkLoadLine1, bulkLoadLine2, &r, conn);
                    if (status != 0)
                    {
                        printf("storage_set failed. Error code: %d.\n", errno);
                        storage_disconnect(conn);
                        if (LOGGING_CLIENT == 2)
                            fclose(fclientOut);
                        return status;
                    }

                    printf("storage_set: successful.\n");
                }

            }
            while (stopLoad == false);

            fclose(fbulkLoad);
            break;
        case 8: // Query => storage_query function has the format of tableString, predicatesString, matchingnum, conn
            //where matchingnum is passed by reference and needs to be changed by storage

            if (!conn)
            {
                errno = ERR_CONNECTION_FAIL;
                printf("Cannot connect to server @ %s:%d. Error code: %d.\n",
                       hostnameString, portNumber, errno);
                if (LOGGING_CLIENT == 2)
                    fclose(fclientOut);
                return -1;
            }

            printf("> \n");
            printf("> Query Selected \n");
            printf("> \n");

            printf("> Input the table: ");
            getString(&tableGetString);

            if ((*tableGetString) == (*escapeSeq))
            {
                printf(">\n> Escape Sequence Detected - Aborting Command \n>\n");
                break;
            }

            printf("> Input the predicates: ");
            getString(&predicatesGetString);

            if ((*predicatesGetString) == (*escapeSeq))
            {
                printf(">\n> Escape Sequence Detected - Aborting Command \n>\n");
                break;
            }

            printf("> Input the max keys: ");
            getString(&maxKeysString);

            if ((*maxKeysString) == (*escapeSeq))
            {
                printf(">\n> Escape Sequence Detected - Aborting Command \n>\n");
                break;
            }
            int keynumint = atoi(maxKeysString);

			totalKeys = keynumint;
			g = 0;

            for (g = 0; g < MAX_RECORDS_PER_TABLE; g++)
            {
               test_keys[g] = (char *)malloc(MAX_KEY_LEN);
               strncpy(test_keys[g], "", sizeof(test_keys[g]));
            }
			keyArrayPointer = test_keys;

            status = storage_query(tableGetString, predicatesGetString,  &test_keys, keynumint, conn);

            if (status == -1)
            {
                printf("storage_query failed. Error code: %d.\n", errno);
                storage_disconnect(conn);
                if (LOGGING_CLIENT == 2)
                    fclose(fclientOut);
                return status;
            }
            printf("storage_query: the value returned for table '%s' is '%d'.\n", tableGetString, status);

            printf("> \n");

			g = 0;
			for (g = 0; g < totalKeys; g++)
			{
				printf("%s\n",keyArrayPointer[g]);
			}

	    break;
		case 9:
			globalcount2 = 0;
			globalcountM = 0;
			globaltimeM = 0;
			printf("> \n");
			printf("> Metrics Selected \n");
			printf("> \n");
			int randkey;
			int randinstruct;
			int randpred;
		
			printf("> Input the random seed: ");
			getString(&randomSeed);

			if ((*randomSeed) == (*escapeSeq))
			{
				printf(">\n> Escape Sequence Detected - Aborting Command \n>\n");
				break;
			}

			randomSeedint = atoi(randomSeed);

			printf("randomSeedint:%d",randomSeedint);
			srand (randomSeedint); // pseudoRandom Seed
			
			float difftime;
			int z = 0;
			for (z = 0; z < MAX_METRICS; z++)
			{
				globalcount2++;
				randkey = rand() % totalKeys; // Pseudo random helps with consistency
				//randinstruct = rand() % 3; // 3 Possible: Get,set,query
				/*
				randinstruct = rand() % 4;
				if (randinstruct > 1)
					randinstruct = 0;
							*/
				randinstruct = 2;
				randpred = rand() % 10; //
				
				if (globalcount2>199)
					globalcountM++;
				switch (randinstruct)
				{
					case 0: //get
					printf("get\n");
					gettimeofday (&beforeTime, NULL);
					status = storage_get("census", keyArrayPointer[randkey], &r, conn);
					gettimeofday (&afterTime, NULL);
					if (status == -1)
					{
						printf("WOOOPS: %d\n\n",errno);
						break;
					}
					difftime = ((afterTime.tv_sec-beforeTime.tv_sec)*1000000L+afterTime.tv_usec-beforeTime.tv_usec);
					
					if (globalcount2>199)
						{
							if (globalcountM==1)
								globaltimeM = difftime;
							else
								globaltimeM = (difftime + globaltimeM*(globalcountM-1))/globalcountM;
							fprintf(metricsfile,"%f: get: %f\n",globalcountM,globaltimeM);
						}
					
					break;
					case 1: //set
					if (conn)
					{
						printf("set\n");
						// read first, then write same value
						struct storage_record r;
						status = storage_get("census", keyArrayPointer[randkey], &r, conn);
						char tempest[50];
						printf("randkey is %d",randkey);
						strcpy(tempest,keyArrayPointer[randkey]);
						gettimeofday (&beforeTime, NULL);
						status = storage_set("census", tempest, &r, conn);
						gettimeofday (&afterTime, NULL);
						if (status == -1)
						{
							printf("WOOOPS: %d\n\n",errno);
							break;
						}
						difftime = ((afterTime.tv_sec-beforeTime.tv_sec)*1000000L+afterTime.tv_usec-beforeTime.tv_usec);
						if (globalcount2>199)
						{
							if (globalcountM==1)
								globaltimeM = difftime;
							else
								globaltimeM = (difftime + globaltimeM*(globalcountM-1))/globalcountM;
							fprintf(metricsfile,"%f: set: %f\n",globalcountM,globaltimeM);
						}
					break;
					}
					break;
					case 2: //query  -> fix the array values
					printf("query\n");

					char tempest2[35];
					strcpy(tempest2,predicatearray[randpred]);
					printf("%s\n",tempest2);
					printf("%s\n",predicatearray[randpred]);
					gettimeofday (&beforeTime, NULL);
            				status = storage_query("census", tempest2,  &metrickeys, totalKeys, conn);
					gettimeofday (&afterTime, NULL);
					
					
					if (status == -1)
					{
						printf("WOOOPS: %d\n\n",errno);
						break;
					}

					difftime = ((afterTime.tv_sec-beforeTime.tv_sec)*1000000L+afterTime.tv_usec-beforeTime.tv_usec);
					if (globalcount2>199)
					{
					if (globalcountM==1)
						globaltimeM = difftime;
					else
						globaltimeM = (difftime + globaltimeM*(globalcountM-1))/globalcountM;
					fprintf(metricsfile,"%f: query: %f\n",globalcountM,globaltimeM);
					}
					break;
				}
			}

			g = 0;
			for (g = 0; g < totalKeys; g++)
			{
				printf("%s\n",keyArrayPointer[g]);
			}

            break;

		case 10:

				if (!conn)
		            {
		                errno = ERR_CONNECTION_FAIL;
		                printf("Cannot connect to server @ %s:%d. Error code: %d.\n",
		                       hostnameString, portNumber, errno);
		                if (LOGGING_CLIENT == 2)
		                    fclose(fclientOut);
		                return -1;
		            }

				    printf("> \n");
		            printf("> Transaction Selected \n");
		            printf("> \n");

		            printf("> Input the table: ");
		            getString(&tableSetString);

		            if ((*tableSetString) == (*escapeSeq))
		            {
		                printf(">\n> Escape Sequence Detected - Aborting Command \n>\n");
		                break;
		            }

		            printf("> Input the key: ");
		            getString(&keySetString);

		            if ((*keySetString) == (*escapeSeq))
		            {
		                printf(">\n> Escape Sequence Detected - Aborting Command \n>\n");
		                break;
		            }

		            printf("> Input the record: ");
		            getString(&recordSetString);

		            if ((*recordSetString) == (*escapeSeq))
		            {
		            printf(">\n> Escape Sequence Detected - Aborting Command \n>\n");
		            break;
		            }

		            status = storage_get(tableSetString, keySetString, &r, conn);
		            if (status != 0 && errno != 6) // if key doesn't exist, that's okay
		            {
		                printf("storage_get failed. Error code: %d.\n", errno);
		                storage_disconnect(conn);
		                if (LOGGING_CLIENT == 2)
		                    fclose(fclientOut);
		                return status;
		            }
		            printf("storage_get: the value returned for key '%s' is '%s', metadata is %d.\n", keySetString, r.value, r.metadata[0]);

					printf("> Change the metadata? (Y/N): ");
		            getString(&confirmString);
					
					if (!strcmp(confirmString,"Y"))
					{
						printf("> Input new metadata: ");
						getString(&confirmString);
						int tempMeta = atoi (confirmString);
						r.metadata[0] = tempMeta;
					}
					
		            strncpy(r.value, recordSetString, sizeof r.value);
		            status = storage_set(tableSetString, keySetString, &r, conn);
		            if (status != 0)
		            {
		             printf("storage_set failed. Error code: %d.\n", errno);
		             storage_disconnect(conn);
		             if (LOGGING_CLIENT == 2)
		             fclose(fclientOut);
		             return status;
		            }
		            printf("storage_set: successful.\n");

		            printf("> \n");


			break;

        default: // Error
            printf("> --------------------- \n");
            printf("Error: invalid command \n");
            printf("> --------------------- \n");

        }

    }
    while (exitClient == false);

    if (commandKey)
        free(commandKey);
    if (hostnameString)
        free(hostnameString);
    if (portString)
        free(portString);
    if (usernameString)
        free(usernameString);
    if (passwordString)
        free(passwordString);
    if (tableGetString)
        free(tableGetString);
    if (keyGetString)
        free(keyGetString);
    if (tableSetString)
        free(tableSetString);
    if (keySetString)
        free(keySetString);
    if (recordSetString)
        free(recordSetString);
    if (confirmString)
        free(confirmString);
    if (predicatesGetString)
        free(predicatesGetString);
    if (matchingNum)
        free(matchingNum);
    if (maxKeysString)
        free(maxKeysString);
    if (randomSeed)
	free(randomSeed);


		fclose(metricsfile);
    g = 0;
    if (keyArrayPointer)
    {
    	for (g = 0; g < MAX_RECORDS_PER_TABLE; g++)
    	{
    		free(keyArrayPointer[g]);
    	}
    }

    g = 0;
    if (keyArrayPointer2)
    {
    	for (g = 0; g < MAX_RECORDS_PER_TABLE; g++)
    	{
    		free(keyArrayPointer2[g]);
    	}
    }

    g = 0;
    if (keypredicatepoint)
    {
    	for (g = 0; g < 10; g++)
    	{
    		free(keypredicatepoint[g]);
    	}
    }

    if (LOGGING_CLIENT == 2)
    {
        fclose(fclientOut);
    }
	
    return 0;
}
